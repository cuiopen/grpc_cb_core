// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
#ifndef GRPC_CB_route_5fguide_2eproto__INCLUDED
#define GRPC_CB_route_5fguide_2eproto__INCLUDED

#include <grpc_cb/grpc_cb.h>  // Include all for user.

#include "route_guide.pb.h"

// package routeguide
namespace routeguide {

namespace RouteGuide {  // service RouteGuide

const ::google::protobuf::ServiceDescriptor& GetServiceDescriptor();

class Stub : public ::grpc_cb::ServiceStub {
 public:
  explicit Stub(const ::grpc_cb::ChannelSptr& channel,
      const ::grpc_cb::CompletionQueueForNextSptr& cq4n_sptr = nullptr);

  ::grpc_cb::Status SyncGetFeature(
      const ::routeguide::Point& request,
      ::routeguide::Feature* response = nullptr);

  using GetFeatureCallback =
      std::function<void (const ::routeguide::Feature& response)>;
  void AsyncGetFeature(
      const ::routeguide::Point& request,
      const GetFeatureCallback& cb = GetFeatureCallback(),
      const ::grpc_cb::ErrorCallback& ecb = ::grpc_cb::ErrorCallback());

  using ListFeatures_SyncReader =
      ::grpc_cb::ClientSyncReader<::routeguide::Feature>;
  ListFeatures_SyncReader
  SyncListFeatures(const ::routeguide::Rectangle& request);

  using ListFeaturesMsgCb = std::function<
      void(const ::routeguide::Feature&)>;
  void AsyncListFeatures(const ::routeguide::Rectangle& request,
      const ListFeaturesMsgCb& on_msg = ListFeaturesMsgCb(),
      const ::grpc_cb::StatusCallback& on_status = ::grpc_cb::StatusCallback());

  using RecordRoute_SyncWriter =
      ::grpc_cb::ClientSyncWriter<::routeguide::Point>;
  RecordRoute_SyncWriter
  SyncRecordRoute();

  using RecordRoute_AsyncWriter =
      ::grpc_cb::ClientAsyncWriter<
          ::routeguide::Point,
          ::routeguide::RouteSummary>;
  RecordRoute_AsyncWriter
  AsyncRecordRoute();

  using RouteChat_SyncReaderWriter =
      ::grpc_cb::ClientSyncReaderWriter<
          ::routeguide::RouteNote,
          ::routeguide::RouteNote>;
  RouteChat_SyncReaderWriter
  SyncRouteChat();

  using RouteChat_AsyncReaderWriter =
      ::grpc_cb::ClientAsyncReaderWriter<
          ::routeguide::RouteNote,
          ::routeguide::RouteNote>;
  RouteChat_AsyncReaderWriter
  AsyncRouteChat(const ::grpc_cb::StatusCallback& on_status);

};  // class Stub

class Service : public ::grpc_cb::Service {
 public:
  Service();
  virtual ~Service();

  virtual const std::string& GetMethodName(size_t i) const GRPC_OVERRIDE;
  virtual void CallMethod(
      size_t method_index, grpc_byte_buffer* request_buffer,
      const ::grpc_cb::CallSptr& call_sptr) GRPC_OVERRIDE;

 public:
  using GetFeature_Replier = ::grpc_cb::ServerReplier<
      ::routeguide::Feature>;
 private:
  void GetFeature(
      grpc_byte_buffer& request_buffer,
      const GetFeature_Replier& replier);
 protected:
  // Todo: virtual void GetFeature(const std::string& request_buffer, replier);
  virtual void GetFeature(
      const ::routeguide::Point& request,
      GetFeature_Replier replier);

 public:
  using ListFeatures_Writer = ::grpc_cb::ServerWriter<
      ::routeguide::Feature>;
 private:
  void ListFeatures(grpc_byte_buffer& request_buffer,
      const ListFeatures_Writer& writer);
 protected:
  virtual void ListFeatures(
      const ::routeguide::Rectangle& request,
      ListFeatures_Writer writer);

 private:
  void RecordRoute(const ::grpc_cb::CallSptr& call_sptr);
 public:
  using RecordRoute_Replier = ::grpc_cb::ServerReplier<
      ::routeguide::RouteSummary>;
  using RecordRoute_Reader = ::grpc_cb::ServerReaderForClientOnlyStreaming<
      ::routeguide::Point, ::routeguide::RouteSummary>;
  using RecordRoute_ReaderSptr = std::shared_ptr<RecordRoute_Reader>;
 protected:
  virtual RecordRoute_ReaderSptr RecordRoute(
      RecordRoute_Replier replier);

 private:
  void RouteChat(const ::grpc_cb::CallSptr& call_sptr);
 public:
  using RouteChat_Writer = ::grpc_cb::ServerWriter<
      ::routeguide::RouteNote>;
  using RouteChat_Reader = ::grpc_cb::ServerReaderForBidiStreaming<
      ::routeguide::RouteNote, ::routeguide::RouteNote>;
  using RouteChat_ReaderSptr = std::shared_ptr<RouteChat_Reader>;
 protected:
  virtual RouteChat_ReaderSptr RouteChat(
      RouteChat_Writer writer);

 private:
  virtual const ::google::protobuf::ServiceDescriptor& GetDescriptor()
      const GRPC_OVERRIDE {
    return GetServiceDescriptor();
  }
};

}  // namespace RouteGuide

}  // namespace routeguide

#endif  // GRPC_CB_route_5fguide_2eproto__INCLUDED
